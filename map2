--[[
  GPS Minimap 2.0 (LDDMAP2)
  by LDDestroier
--]]

local tArg = {...}
local id = os.getComputerID()
local modem = {}
local scr_x, scr_y = term.getSize()
local defaultTimeout = 3
local waypointChar = "@"
local port = gps.CHANNEL_GPS

local map = {
	waypoints = {},		--list of all waypoints with their coordinates, names, colors, and descriptions.
	scale = 1,		--zoom scale factor for rendering
	rotate = 0,		--screen rotation for rendering
	scrollX = 0,		--how far the screen is scrolled to the right
	scrollY = 0,		--how far the screen is scrolled downwards
	skewX = 1,		--screen skewing on the X axis
	skewZ = 1,		--screen skewing on the Z axis
	useBlittle = false,	--whether or not to use Bomb Bloke's BLittle API for more detailed rendering
	drawMode = false,	--if true, can draw on the screen for making "maps" on the minimap.
}

local palate = {
	bg = colors.gray,
	tx = colors.white,
	waypoint = colors.white,
}

local geomap = {
	image = nil,
	anchorX = 0,
	anchorZ = 0,
}

local tsv = function(visible)
	if term.current().setVisible then
		term.current().setVisible(visible)
	end
end

local waitForModem = function(time)
	local tID, evt, rID = os.startTimer(time or 1)
	while true do
		evt, rID = os.pullEvent()
		if evt == "timer" then
			if rID == tID then
				return false
			end
		elseif evt == "peripheral" then
			if peripheral.getType(rID) == "modem" then
				return true
			end
		end
	end
end

local getModem = function(timeout) --returns a working modem, prioritizes use of wireless modem
	if modem.open then return modem end
	local modems = {peripheral.find("modem")}
	if #modems == 0 then
		if waitForModem(timeout or defaultTimeout) then
			modems = {peripheral.find("modem")}
		else
			error("No modem found...")
		end
	end
	for a = 1, #modems do
		if modems[a].isWireless() then
			modems[a].open(port)
			return modems[a]
		end
	end
	modems[1].open(port)
	return modems[1]
end

modem = getModem()

local copyTable = function(tbl)
	local output = {}
	for k,v in pairs(tbl) do
		output[k] = v
	end
	return output
end

local getDotsInLine = function( startX, startY, endX, endY ) --stolen from the paintutils API...hehehe
	local out = {}
	startX = math.floor(startX)
	startY = math.floor(startY)
	endX = math.floor(endX)
	endY = math.floor(endY)
	if startX == endX and startY == endY then
		out = {{x=startX,y=startY}}
		return out
	end
	local minX = math.min( startX, endX )
	if minX == startX then
		minY = startY
		maxX = endX
		maxY = endY
	else
		minY = endY
		maxX = startX
		maxY = startY
	end
	local xDiff = maxX - minX
	local yDiff = maxY - minY
	if xDiff > math.abs(yDiff) then
		local y = minY
		local dy = yDiff / xDiff
		for x=minX,maxX do
			out[#out+1] = {x=x,y=math.floor(y+0.5)}
			y = y + dy
		end
	else
		local x = minX
		local dx = xDiff / yDiff
		if maxY >= minY then
			for y=minY,maxY do
				out[#out+1] = {x=math.floor(x+0.5),y=y}
				x = x + dx
			end
		else
			for y=minY,maxY,-1 do
				out[#out+1] = {x=math.floor(x+0.5),y=y}
				x = x - dx
			end
		end
	end
	return out
end

local player = {
	x = 0,			--actual X position
	y = 0,			--actual Y position
	z = 0,			--actual Z position
	xvel = nil,		--speed in X axis
	yvel = nil,		--speed in Y axis
	zvel = nil,		--speed in Z axis
	xinertia = nil,		--momentum in X axis
	yinertia = nil,		--momentum in Y axis
	zinertia = nil,		--momentum in Z axis
	yaw = nil,		--0-360 degree X,Z direction of movement
	pitch = nil,		--0-360 degree [X/Z],Y direction of movement
	grounded = nil,		--whether or not you are on ground
}

local oldePlayer

local updatePlayer = function(timeout)
	oldePlayer = copyTable(player)
	player.x, player.y, player.z = gps.locate(timeout or defaultTimeout)
	if not player.x then
		player.y, player.z, player.xvel, player.yvel, player.zvel = nil, nil, nil, nil, nil
	elseif player.xvel and player.yvel and player then
		if not oldePlayer.x then
			oldePlayer.x, oldePlayer.y, oldePlayer.z = player.x, player.y, player.z
		end
		player.xvel = player.x - oldePlayer.x
		player.yvel = player.y - oldePlayer.y
		player.zvel = player.z - oldePlayer.z
		player.xinertia = player.xvel - oldePlayer.xvel
		player.yinertia = player.yvel - oldePlayer.yvel
		player.zinertia = player.zvel - oldePlayer.zvel
		player.speedXZ = math.sqrt((player.x^2)+(player.z^2))
		player.grounded = (player.yvel == 0 and oldePlayer.y >= player.y)
		player.pitch = math.deg(math.atan(player.z / player.x))
		player.yaw = math.deg(math.atan(player.y / player.speedXZ))
	end
	return player, oldePlayer
end

updatePlayer()

local newWaypoint = function(x, y, z, name, color, desc)
	table.insert(map.waypoints, {
		x = x,
		y = y,
		z = z,
		name = name,
		color = color,
		desc = desc,
	})
end

local cwrite = function(txt,x,y)
	local cx,cy = term.getCursorPos()
	term.setCursorPos(((x or scr_x)/2) - (#txt/2), y or cy)
	return term.write(txt)
end

local drawWaypointLabel = function(point)
	term.setTextColor(palate.waypoint)
	cwrite(point.name,point.x - map.scrollX,point.y - map.scrollY - 1)
	term.setCursorPos(point.x - map.scrollX,point.y - map.scrollY)
	term.setTextColor(point.color)
	term.write(waypointChar:sub(1,1))
end

renderMinimap = function()
	term.setBackgroundColor(palate.bg)
	term.clear()
	for w = 1, #map.waypoints do
		drawWaypointLabel(map.waypoints[w])
	end
	cwrite("*",nil,scr_y/2)
end

local keysDown, miceDown = {}, {}
local mode = "minimap"

local getInput = function()
	local evt
	while true do
		evt = {os.pullEvent()}
		if evt[1] == "key" then
			local key = evt[2]
			keysDown[key] = true
			if mode == "minimap" then
				if key == keys.up then
					player.z = player.z - 1
				elseif key == keys.down then
					player.z = player.z + 1
				elseif key == keys.left then
					player.x = player.x - 1
				elseif key == keys.right then
					player.x = player.x + 1
				end
				if key == keys.q then
					return
				end
			end
		elseif evt[1] == "key_up" then
			keysDown[evt[2]] = nil
		elseif evt[1] == "mouse_click" then
			miceDown[evt[2]] = {evt[3], evt[4]}
		elseif evt[1] == "mouse_drag" then
			miceDown[evt[2]] = {evt[3], evt[4]}
		elseif evt[1] == "mouse_up" then
			miceDown[evt[2]] = nil
		end
	end
end

local main = function()
	while true do
		updatePlayer()
		renderMinimap()
		term.setCursorPos(1,scr_y)
		term.write("X:"..player.x.." Y:"..player.y.." Z:"..player.z)
	end
end

newWaypoint(0, 128, 0, "Origin", colors.white, "The center of the world.")

parallel.waitForAny(main,getInput)
